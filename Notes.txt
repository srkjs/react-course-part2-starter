Setting up React Query - 
npm install @tanstack/react-query@4.28

Install React Query Dev tools -
npm install @tanstack/react-query-devtools@4.28


Understanding the Application Layers -
TOP |
    Components -> TodoForm, TodoList
    Custom Hooks -> useTodos, useAddTodo -> Hooks use HTTP services to fetch and update data. This has all logic to manage data in cache
    HTTP Services -> todoService -> Instances of APIClient dedicated to working with specific types of objects. For example, we have todoService for working with todos and postService for working with posts
    API CLIENT -> APIClient -> Handles sending HTTP requests to backend
Bottom |

Each layer in this Application has a single responsibility resulting in clean and well organized architecture
Managing, maintaining code becomes easy. We can now also reuse code.


Reducer -> A function that allows us to centralize state updates in a Components
    - All the state management logic can be taken outside of the component and centralize it in a single reducer function


Sharing State using React Context ->
    If we have to share a state between two Components - say Navbar and TaskList,

            App
    Homepage    NavBar
    TaskList
    
    Then we have to lift the state to App component and pass it as props to Homepage, Navbar and TaskList Components

    Prop Drill -> to pass the state to TaskList, we need to pass the prop through Homepage which does not use this state

    React Context -> Allows sharing data without passing it down thorough many components in the middle.
    So code will be cleaner and maintainable.

    Steps: 
        1. Lift the state up to the closest parent
        2. Create Context (like a Truck for transporting data) and Provide context to components
        3. Access contexts using useContext

React Context - 
    Anytime a context changes, all the components using the context gets re-rendered
    NOTE: A context should only hold values that are closely related and tend to change together.
          A context should only have a single responsibility/purpose.

    Minimizing renders - Split up a context into smaller and focused ones, each having a single responsibility  


When to use Context - 
    React app has some state/data that needs to be shared between components
    This can be 
        Server state -> Data we fetch from backend (Avoid using react contexts for this -> Use ReactQuery)
        Client (UI) state -> Represents the state of the client/UI (Use Local state + React Context)
                                                                   ( useState() -[For simple state management] or useReducer() -[For complex state management logic])
    State management libraries - [Used when splitting up context doesn't make sense & we deal with unnecessary re-renders]
        Eg: Redux, Zustland, MobX, Recoil, xState


npm i zustand@4.3.7

https://github.com/beerose/simple-zustand-devtools
npm i simple-zustand-devtools@1.1.0

Add node as type as a development dependency
npm i -D @types/node

npm i react-router-dom@6.10.0